name: Deploy CDK App Kubernetes

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r kubernetes-cdk-app/requirements.txt

      - name: Install AWS CDK
        run: |
          npm install -g aws-cdk

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Replace variables
        env:
          GRAFANAADMINPASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        run: |
          sed -i 's/{{GRAFANAADMINPASSWORD}}/'"$GRAFANAADMINPASSWORD"'/g' pods_assets/grafana/grafana-deployment.yaml
          
      - name: CDK Diff
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd kubernetes-cdk-app
          cdk bootstrap
          cdk diff --all

      - name: Deploy CDK Stack
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd kubernetes-cdk-app
          cdk bootstrap
          cdk deploy --all --require-approval never

      - name: Wait for Master Node to be initialized
        id: wait-for-master-to-be-initialized
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
        run: |
          # Fetch the public IP of the EC2 instance
          MASTER_INSTANCE_ID=$(aws cloudformation describe-stacks \
            --stack-name KubernetesMasterStack \
            --query "Stacks[0].Outputs[?OutputKey=='MasterInstanceId'].OutputValue" \
            --output text \
            --region $AWS_REGION)
          echo "MASTER_INSTANCE_ID=${MASTER_INSTANCE_ID}" >> $GITHUB_ENV
          echo "The fetched master instance Id is: ${MASTER_INSTANCE_ID}"  # Echo the id for debugging          
          aws ec2 wait instance-status-ok --instance-ids $MASTER_INSTANCE_ID
          echo "Master instance initialised..."

      - name: Wait for Worker Node to be initialized
      id: wait-for-worker-to-be-initialized
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: eu-west-1
      run: |
        # Fetch the public IP of the EC2 instance
        WORKER_INSTANCE_ID=$(aws cloudformation describe-stacks \
          --stack-name KubernetesWorkerStack \
          --query "Stacks[0].Outputs[?OutputKey=='MasterInstanceId'].OutputValue" \
          --output text \
          --region $AWS_REGION)
        echo "WORKER_INSTANCE_ID=${WORKER_INSTANCE_ID}" >> $GITHUB_ENV
        echo "The fetched master instance Id is: ${WORKER_INSTANCE_ID}"  # Echo the id for debugging          
        aws ec2 wait instance-status-ok --instance-ids $WORKER_INSTANCE_ID
        echo "Worker instance initialised..."

      - name: Fetch EC2 Master Public IP
        id: fetch-ip-master
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
        run: |
          # Fetch the public IP of the EC2 instance
          MASTER_INSTANCE_PUBLIC_IP=$(aws cloudformation describe-stacks \
            --stack-name KubernetesMasterStack \
            --query "Stacks[0].Outputs[?OutputKey=='MasterInstancePublicIp'].OutputValue" \
            --output text \
            --region $AWS_REGION)
          echo "MASTER_INSTANCE_PUBLIC_IP=${MASTER_INSTANCE_PUBLIC_IP}" >> $GITHUB_ENV
          echo "The fetched public IP is: ${MASTER_INSTANCE_PUBLIC_IP}"  # Echo the IP for debugging

      - name: Test SSH Connectivity To Master Server
        run: |
          echo "MASTER_INSTANCE_PUBLIC_IP=${{ env.MASTER_INSTANCE_PUBLIC_IP }}"
          echo "Trying to connect to ${MASTER_INSTANCE_PUBLIC_IP}"
          nc -zv ${MASTER_INSTANCE_PUBLIC_IP} 22 || echo "Port 22 is not open on ${MASTER_INSTANCE_PUBLIC_IP}"

      - name: Fetch EC2 Worker Public IP
        id: fetch-ip-worker
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
        run: |
          # Fetch the public IP of the EC2 instance
          WORKER_INSTANCE_PUBLIC_IP=$(aws cloudformation describe-stacks \
            --stack-name KubernetesWorkerStack \
            --query "Stacks[0].Outputs[?OutputKey=='WorkerInstancePublicIp'].OutputValue" \
            --output text \
            --region $AWS_REGION)
          echo "WORKER_INSTANCE_PUBLIC_IP=${WORKER_INSTANCE_PUBLIC_IP}" >> $GITHUB_ENV
          echo "The fetched public IP is: ${WORKER_INSTANCE_PUBLIC_IP}"  # Echo the IP for debugging          
      
      - name: Test SSH Connectivity To Worker Server
        run: |
          echo "WORKER_INSTANCE_PUBLIC_IP=${{ env.WORKER_INSTANCE_PUBLIC_IP }}"
          echo "Trying to connect to ${WORKER_INSTANCE_PUBLIC_IP}"
          nc -zv ${WORKER_INSTANCE_PUBLIC_IP} 22 || echo "Port 22 is not open on ${WORKER_INSTANCE_PUBLIC_IP}"
      
      - name: Upload pods assets to master server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.MASTER_INSTANCE_PUBLIC_IP }}  
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}       
          source: "pods_assets"
          target: "/home/ubuntu/pods_assets"

      - name: Upload node_exporter assets to master server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.MASTER_INSTANCE_PUBLIC_IP }}  
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "node_exporter_installation"
          target: "/home/ubuntu/node_exporter_installation"

      # - name: Check WordPress Site response code
      #   uses: appleboy/ssh-action@v0.1.5
      #   with:
      #     host: ${{ env.INSTANCE_PUBLIC_IP }}
      #     username: ${{ secrets.SERVER_USER }}
      #     key: ${{ secrets.SERVER_SSH_KEY }}
      #     script: |
      #       if curl -s -o /dev/null -w "%{http_code}" http://localhost | grep -q '^200$'; then
      #           echo "Site is up and returned status 200."
      #       else
      #           echo "Site returned a status other than 200."
      #           exit 1
      #       fi

      - name: Continue bootrstrapping master node
        id: continue_bootstrapping_master
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.MASTER_INSTANCE_PUBLIC_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            mkdir -p $HOME/.kube
            sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
            sudo chown $(id -u):$(id -g) $HOME/.kube/config
            sleep 10
            kubectl apply -f /home/ubuntu/calico.yaml

      - name: Get Join Command and Token from Master Node
        id: get_join_command
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.MASTER_INSTANCE_PUBLIC_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Get the join command
            JOIN_COMMAND=$(sudo kubeadm token create --print-join-command)
            echo "Join command: $JOIN_COMMAND"
            # Create a script that checks lsof and runs the join command if the port is not in use
            echo "if ! sudo lsof -i :10250 | grep LISTEN; then sudo $JOIN_COMMAND; else echo 'Port 10250 is already in use.'; fi" > /tmp/join_command.sh
            chmod +x /tmp/join_command.sh  # Make it executable

      - name: Join Worker Node to Cluster
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.MASTER_INSTANCE_PUBLIC_IP }}  # Connect to master first
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "Joining the worker node to the cluster..."
            # Create a temporary key file
            echo "${{ secrets.SERVER_SSH_KEY }}" > /tmp/private_key
            chmod 600 /tmp/private_key  # Ensure it's only readable by the user
            # Copy the join command script to the worker node
            scp -o StrictHostKeyChecking=no -i /tmp/private_key /tmp/join_command.sh ubuntu@${{ env.WORKER_INSTANCE_PUBLIC_IP }}:/tmp/
            # SSH to the worker node and run the join command
            ssh -o StrictHostKeyChecking=no -i /tmp/private_key ubuntu@${{ env.WORKER_INSTANCE_PUBLIC_IP }} "bash /tmp/join_command.sh"
            sleep 10

      - name: Install MongoDB Pod
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.MASTER_INSTANCE_PUBLIC_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "changing permissions for mongo installation script"
            cd /home/ubuntu/pods_assets/pods_assets/mongo_deployment
            chmod 775 setup_mongo_deployment.sh
            echo "Setting Up Mongo Pod"
            ./setup_mongo_deployment.sh

      - name: Install Flask Application Pod
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.MASTER_INSTANCE_PUBLIC_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "changing permissions for flask application installation script"
            cd /home/ubuntu/pods_assets/pods_assets/flask_app
            chmod 775 setup_flask_kubernetes.sh
            echo "Setting Up Flask App Pod"
            ./setup_flask_kubernetes.sh  
      
      - name: Replace Prometheus Configs Variables
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.MASTER_INSTANCE_PUBLIC_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            sed -i 's/{{MASTERINSTANCEPUBLICIP}}/'"${{ env.MASTER_INSTANCE_PUBLIC_IP }}"'/g' pods_assets/pods_assets/prometheus/prometheus-config.yaml

      - name: Install Prometheus Application Pod
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.MASTER_INSTANCE_PUBLIC_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "changing permissions for prometheus application installation script"
            cd /home/ubuntu/pods_assets/pods_assets/prometheus
            chmod 775 setup_prometheus.sh
            echo "Setting Up Prometheus App Pod"
            ./setup_prometheus.sh
       
      - name: Install Grafana Application Pod
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.MASTER_INSTANCE_PUBLIC_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "changing permissions for grafana application installation script"
            cd /home/ubuntu/pods_assets/pods_assets/grafana
            chmod 775 setup_grafana.sh
            echo "Setting Up Grafana App Pod"
            ./setup_grafana.sh

      - name: Install Elasticsearch Application Pod
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.MASTER_INSTANCE_PUBLIC_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "changing permissions for grafana application installation script"
            cd /home/ubuntu/pods_assets/pods_assets/elasticsearch
            chmod 775 setup_elasticsearch.sh
            echo "Setting Up Elasticsearch App Pod"
            ./setup_elasticsearch.sh

      - name: Install Node Exporter on Machine
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.MASTER_INSTANCE_PUBLIC_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "changing permissions for node exporter installation script"
            chmod 775 /home/ubuntu/node_exporter_installation/node_exporter_installation/install_node_exporter.sh
            echo "Setting Up Node Exporter As A Service"
            /home/ubuntu/node_exporter_installation/node_exporter_installation/install_node_exporter.sh

      - name: Completion Script echo Master Server url
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.MASTER_INSTANCE_PUBLIC_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "Deployment is successful"
            IP_ADDR=`curl -s http://whatismyip.akamai.com/`
            echo "Kubernetes Master IP: http://${IP_ADDR}"

      - name: Completion Script echo Worker Server url
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.WORKER_INSTANCE_PUBLIC_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "Deployment is successful"
            IP_ADDR=`curl -s http://whatismyip.akamai.com/`
            echo "Kubernetes Worker Server IP: http://${IP_ADDR}"